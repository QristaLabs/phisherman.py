{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Phisherman.py is an async API wrapper made in Python for Phisherman.gg which is a centralised database and scam links and is mainly designed for Discord bots to check URLs for any phishing links Example import asyncio from phisherman import Client app = Client(token=\"Your Token\") async def main(): if await app.check_domain(\"internetbadguys.com\"): print(\"Detected suspicious.\") await app.close() loop = asyncio.get_event_loop() loop.run_until_complete(main()) Links Source Code : github.com/QristaLabs/phisherman.py PyPi : pypi.org/project/phisherman.py","title":"Home"},{"location":"#about","text":"Phisherman.py is an async API wrapper made in Python for Phisherman.gg which is a centralised database and scam links and is mainly designed for Discord bots to check URLs for any phishing links","title":"About"},{"location":"#example","text":"import asyncio from phisherman import Client app = Client(token=\"Your Token\") async def main(): if await app.check_domain(\"internetbadguys.com\"): print(\"Detected suspicious.\") await app.close() loop = asyncio.get_event_loop() loop.run_until_complete(main())","title":"Example"},{"location":"#links","text":"Source Code : github.com/QristaLabs/phisherman.py PyPi : pypi.org/project/phisherman.py","title":"Links"},{"location":"code-reference/","text":"Code Reference app Client Client class for the Phisherman API Wrapper. Attributes: Name Type Description token str API Token from phisherman.gg base_url str Base URL to access the API session aiohttp.ClientSession For creating client session and to make requests Source code in phisherman/app.py class Client : \"\"\" Client class for the Phisherman API Wrapper. Attributes ---------- token : str API Token from phisherman.gg base_url : str Base URL to access the API session : aiohttp.ClientSession For creating client session and to make requests \"\"\" USER_AGENT = f \"Phisherman API wrapper - Python/ { PYTHON_VERSION } AIOHTTP/ { aiohttp . __version__ } \" def __init__ ( self , token : str ) -> None : \"\"\" Construct an application Parameters ---------- token : str Phisherman.gg API Token version : t.Optional[int] Optional Argument for the API Version, Default to 1 for now \"\"\" self . token = token # Session with lock for preventing deadlocks. self . _session = None self . _lock = asyncio . Lock () async def close ( self ) -> None : \"\"\"Close the client session.\"\"\" if self . _session is not None : await self . _session . close () async def fetch ( self , route : Route , * , headers : dict = None , data : dict = None , text_response : bool = False , return_status : str = False , auth_required : bool = True , ) -> t . Optional [ dict ]: \"\"\" Fetching a response from the API Parameters ---------- route : Route The API route you want to make a call to headers : dict Headers for the API call, Defaults to None data : dict Data for the API call, Defaults to None text_response : bool Whether or not to expect text response, Defaults to False auth_required : bool Whether or not the auth token is required, Defaults to True Returns ------- t.Optional[dict] \"\"\" if headers is None : headers = {} headers = { \"User-Agent\" : self . USER_AGENT , ** headers } # TODO: Remove this auth_required logic. Redundant, as if the endpoint doesn't require auth, # it'll never be read, and hence passing it won't change anything. if auth_required : headers [ \"Authorization\" ] = f \"Bearer { self . token } \" if not self . _session : self . _session = aiohttp . ClientSession () async with self . _lock : async with self . _session . request ( method = route . method , url = route . url , headers = headers , data = data ) as res : if return_status : return res . status if res . status in [ 200 , 201 ]: if text_response : data = await res . text () else : data = await res . json () else : data = None return data # Utility methods. @staticmethod def clean_domain ( domain : str ) -> str : return domain . replace ( \"https://\" , \"\" ) . replace ( \"http://\" , \"\" ) # Main methods. async def check_domain ( self , domain : str ) -> bool : \"\"\" Checks a domain, Returns True if its suspicious else False. Parameters ---------- domain : str Domain you want to look for. Returns ------- bool Notes ----- Even if the function returns `False`, that doesn't mean the domain is always suspicious. If the domain is not registered in the API database, or incorrect domain is entered, the function will return `False` \"\"\" domain = self . clean_domain ( domain ) data = await self . fetch ( Route ( \"GET\" , f \"/domains/ { domain } \" ), auth_required = False ) if not data : return False if \"missing permission\" in data : raise MissingPermission ( \"You don't have permission to access this API\" ) return True if data == b \"true\" else False async def fetch_info ( self , domain : str ) -> dict : \"\"\" Fetch the information for a domain. Parameters ---------- domain : str Domain you want to look for Returns ------- dict \"\"\" domain = self . clean_domain ( domain ) data = await self . fetch ( Route ( \"GET\" , f \"/domains/info/ { domain } \" )) if not data : return {} success = data . get ( \"success\" , False ) if not success : if data . get ( \"message\" , \"\" ) == \"missing permission\" : raise InvalidRequest ( \"Invalid Request, Check your domain.\" ) return data [ domain ] async def report_phish ( self , domain : str , guild : t . Optional [ int ] = None ) -> bool : \"\"\" Report a site for phishing Parameters ---------- domain : str Domain you want to report as a phising site. guild : t.Optional[int] Discord Guild ID where you discovered the site link. Returns ------- bool \"\"\" domain = self . clean_domain ( domain ) data = None if guild : data = { \"guild\" : str ( guild )} status_code = await self . fetch ( Route ( \"POST\" , f \"/domains/report/ { domain } \" ), data = data ) if status_code == 204 : logger . info ( f \"Successfully reported the site ` { guild } `\" ) return True else : return False __init__ ( self , token ) special Construct an application Parameters: Name Type Description Default token str Phisherman.gg API Token required version t.Optional[int] Optional Argument for the API Version, Default to 1 for now 'to' Source code in phisherman/app.py def __init__ ( self , token : str ) -> None : \"\"\" Construct an application Parameters ---------- token : str Phisherman.gg API Token version : t.Optional[int] Optional Argument for the API Version, Default to 1 for now \"\"\" self . token = token # Session with lock for preventing deadlocks. self . _session = None self . _lock = asyncio . Lock () check_domain ( self , domain ) async Checks a domain, Returns True if its suspicious else False. Parameters: Name Type Description Default domain str Domain you want to look for. required Source code in phisherman/app.py async def check_domain ( self , domain : str ) -> bool : \"\"\" Checks a domain, Returns True if its suspicious else False. Parameters ---------- domain : str Domain you want to look for. Returns ------- bool Notes ----- Even if the function returns `False`, that doesn't mean the domain is always suspicious. If the domain is not registered in the API database, or incorrect domain is entered, the function will return `False` \"\"\" domain = self . clean_domain ( domain ) data = await self . fetch ( Route ( \"GET\" , f \"/domains/ { domain } \" ), auth_required = False ) if not data : return False if \"missing permission\" in data : raise MissingPermission ( \"You don't have permission to access this API\" ) return True if data == b \"true\" else False close ( self ) async Close the client session. Source code in phisherman/app.py async def close ( self ) -> None : \"\"\"Close the client session.\"\"\" if self . _session is not None : await self . _session . close () fetch ( self , route , * , headers = None , data = None , text_response = False , return_status = False , auth_required = True ) async Fetching a response from the API Parameters: Name Type Description Default route Route The API route you want to make a call to required headers dict Headers for the API call, Defaults to None None data dict Data for the API call, Defaults to None None text_response bool Whether or not to expect text response, Defaults to False False auth_required bool Whether or not the auth token is required, Defaults to True True Source code in phisherman/app.py async def fetch ( self , route : Route , * , headers : dict = None , data : dict = None , text_response : bool = False , return_status : str = False , auth_required : bool = True , ) -> t . Optional [ dict ]: \"\"\" Fetching a response from the API Parameters ---------- route : Route The API route you want to make a call to headers : dict Headers for the API call, Defaults to None data : dict Data for the API call, Defaults to None text_response : bool Whether or not to expect text response, Defaults to False auth_required : bool Whether or not the auth token is required, Defaults to True Returns ------- t.Optional[dict] \"\"\" if headers is None : headers = {} headers = { \"User-Agent\" : self . USER_AGENT , ** headers } # TODO: Remove this auth_required logic. Redundant, as if the endpoint doesn't require auth, # it'll never be read, and hence passing it won't change anything. if auth_required : headers [ \"Authorization\" ] = f \"Bearer { self . token } \" if not self . _session : self . _session = aiohttp . ClientSession () async with self . _lock : async with self . _session . request ( method = route . method , url = route . url , headers = headers , data = data ) as res : if return_status : return res . status if res . status in [ 200 , 201 ]: if text_response : data = await res . text () else : data = await res . json () else : data = None return data fetch_info ( self , domain ) async Fetch the information for a domain. Parameters: Name Type Description Default domain str Domain you want to look for required Source code in phisherman/app.py async def fetch_info ( self , domain : str ) -> dict : \"\"\" Fetch the information for a domain. Parameters ---------- domain : str Domain you want to look for Returns ------- dict \"\"\" domain = self . clean_domain ( domain ) data = await self . fetch ( Route ( \"GET\" , f \"/domains/info/ { domain } \" )) if not data : return {} success = data . get ( \"success\" , False ) if not success : if data . get ( \"message\" , \"\" ) == \"missing permission\" : raise InvalidRequest ( \"Invalid Request, Check your domain.\" ) return data [ domain ] report_phish ( self , domain , guild = None ) async Report a site for phishing Parameters: Name Type Description Default domain str Domain you want to report as a phising site. required guild Optional[int] Discord Guild ID where you discovered the site link. None Source code in phisherman/app.py async def report_phish ( self , domain : str , guild : t . Optional [ int ] = None ) -> bool : \"\"\" Report a site for phishing Parameters ---------- domain : str Domain you want to report as a phising site. guild : t.Optional[int] Discord Guild ID where you discovered the site link. Returns ------- bool \"\"\" domain = self . clean_domain ( domain ) data = None if guild : data = { \"guild\" : str ( guild )} status_code = await self . fetch ( Route ( \"POST\" , f \"/domains/report/ { domain } \" ), data = data ) if status_code == 204 : logger . info ( f \"Successfully reported the site ` { guild } `\" ) return True else : return False route Route Class used for constructing API endpoints with a given base URL Attributes: Name Type Description method t.Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"] Method for the API Call path str Endpoints for the API Source code in phisherman/route.py class Route : \"\"\" Class used for constructing API endpoints with a given base URL Attributes ---------- method : t.Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"] Method for the API Call path : str Endpoints for the API \"\"\" BASE_URL = \"https://api.phisherman.gg/v1\" def __init__ ( self , method : t . Literal [ \"GET\" , \"POST\" , \"PUT\" , \"DELETE\" , \"PATCH\" ], path : str ) -> None : \"\"\" Construct a route Parameters ---------- method : str Method for the API Call path : str Endpoints for the API \"\"\" self . method = method . upper () self . path = path @property def base_url ( self ) -> str : \"\"\"Base URL\"\"\" return self . BASE_URL @base_url . setter def base_url ( self , url : str ) -> None : \"\"\" Base URL setter Parameters ---------- url : str the URL you want to set \"\"\" self . BASE_URL = url @property def url ( self ) -> str : \"\"\"Returns the complete route with the\"\"\" return self . base_url + self . path base_url : str property writable Base URL url : str property readonly Returns the complete route with the __init__ ( self , method , path ) special Construct a route Parameters: Name Type Description Default method Literal['GET', 'POST', 'PUT', 'DELETE', 'PATCH'] Method for the API Call required path str Endpoints for the API required Source code in phisherman/route.py def __init__ ( self , method : t . Literal [ \"GET\" , \"POST\" , \"PUT\" , \"DELETE\" , \"PATCH\" ], path : str ) -> None : \"\"\" Construct a route Parameters ---------- method : str Method for the API Call path : str Endpoints for the API \"\"\" self . method = method . upper () self . path = path","title":"Code Reference"},{"location":"code-reference/#code-reference","text":"","title":"Code Reference"},{"location":"code-reference/#phisherman.app","text":"","title":"app"},{"location":"code-reference/#phisherman.app.Client","text":"Client class for the Phisherman API Wrapper. Attributes: Name Type Description token str API Token from phisherman.gg base_url str Base URL to access the API session aiohttp.ClientSession For creating client session and to make requests Source code in phisherman/app.py class Client : \"\"\" Client class for the Phisherman API Wrapper. Attributes ---------- token : str API Token from phisherman.gg base_url : str Base URL to access the API session : aiohttp.ClientSession For creating client session and to make requests \"\"\" USER_AGENT = f \"Phisherman API wrapper - Python/ { PYTHON_VERSION } AIOHTTP/ { aiohttp . __version__ } \" def __init__ ( self , token : str ) -> None : \"\"\" Construct an application Parameters ---------- token : str Phisherman.gg API Token version : t.Optional[int] Optional Argument for the API Version, Default to 1 for now \"\"\" self . token = token # Session with lock for preventing deadlocks. self . _session = None self . _lock = asyncio . Lock () async def close ( self ) -> None : \"\"\"Close the client session.\"\"\" if self . _session is not None : await self . _session . close () async def fetch ( self , route : Route , * , headers : dict = None , data : dict = None , text_response : bool = False , return_status : str = False , auth_required : bool = True , ) -> t . Optional [ dict ]: \"\"\" Fetching a response from the API Parameters ---------- route : Route The API route you want to make a call to headers : dict Headers for the API call, Defaults to None data : dict Data for the API call, Defaults to None text_response : bool Whether or not to expect text response, Defaults to False auth_required : bool Whether or not the auth token is required, Defaults to True Returns ------- t.Optional[dict] \"\"\" if headers is None : headers = {} headers = { \"User-Agent\" : self . USER_AGENT , ** headers } # TODO: Remove this auth_required logic. Redundant, as if the endpoint doesn't require auth, # it'll never be read, and hence passing it won't change anything. if auth_required : headers [ \"Authorization\" ] = f \"Bearer { self . token } \" if not self . _session : self . _session = aiohttp . ClientSession () async with self . _lock : async with self . _session . request ( method = route . method , url = route . url , headers = headers , data = data ) as res : if return_status : return res . status if res . status in [ 200 , 201 ]: if text_response : data = await res . text () else : data = await res . json () else : data = None return data # Utility methods. @staticmethod def clean_domain ( domain : str ) -> str : return domain . replace ( \"https://\" , \"\" ) . replace ( \"http://\" , \"\" ) # Main methods. async def check_domain ( self , domain : str ) -> bool : \"\"\" Checks a domain, Returns True if its suspicious else False. Parameters ---------- domain : str Domain you want to look for. Returns ------- bool Notes ----- Even if the function returns `False`, that doesn't mean the domain is always suspicious. If the domain is not registered in the API database, or incorrect domain is entered, the function will return `False` \"\"\" domain = self . clean_domain ( domain ) data = await self . fetch ( Route ( \"GET\" , f \"/domains/ { domain } \" ), auth_required = False ) if not data : return False if \"missing permission\" in data : raise MissingPermission ( \"You don't have permission to access this API\" ) return True if data == b \"true\" else False async def fetch_info ( self , domain : str ) -> dict : \"\"\" Fetch the information for a domain. Parameters ---------- domain : str Domain you want to look for Returns ------- dict \"\"\" domain = self . clean_domain ( domain ) data = await self . fetch ( Route ( \"GET\" , f \"/domains/info/ { domain } \" )) if not data : return {} success = data . get ( \"success\" , False ) if not success : if data . get ( \"message\" , \"\" ) == \"missing permission\" : raise InvalidRequest ( \"Invalid Request, Check your domain.\" ) return data [ domain ] async def report_phish ( self , domain : str , guild : t . Optional [ int ] = None ) -> bool : \"\"\" Report a site for phishing Parameters ---------- domain : str Domain you want to report as a phising site. guild : t.Optional[int] Discord Guild ID where you discovered the site link. Returns ------- bool \"\"\" domain = self . clean_domain ( domain ) data = None if guild : data = { \"guild\" : str ( guild )} status_code = await self . fetch ( Route ( \"POST\" , f \"/domains/report/ { domain } \" ), data = data ) if status_code == 204 : logger . info ( f \"Successfully reported the site ` { guild } `\" ) return True else : return False","title":"Client"},{"location":"code-reference/#phisherman.app.Client.__init__","text":"Construct an application Parameters: Name Type Description Default token str Phisherman.gg API Token required version t.Optional[int] Optional Argument for the API Version, Default to 1 for now 'to' Source code in phisherman/app.py def __init__ ( self , token : str ) -> None : \"\"\" Construct an application Parameters ---------- token : str Phisherman.gg API Token version : t.Optional[int] Optional Argument for the API Version, Default to 1 for now \"\"\" self . token = token # Session with lock for preventing deadlocks. self . _session = None self . _lock = asyncio . Lock ()","title":"__init__()"},{"location":"code-reference/#phisherman.app.Client.check_domain","text":"Checks a domain, Returns True if its suspicious else False. Parameters: Name Type Description Default domain str Domain you want to look for. required Source code in phisherman/app.py async def check_domain ( self , domain : str ) -> bool : \"\"\" Checks a domain, Returns True if its suspicious else False. Parameters ---------- domain : str Domain you want to look for. Returns ------- bool Notes ----- Even if the function returns `False`, that doesn't mean the domain is always suspicious. If the domain is not registered in the API database, or incorrect domain is entered, the function will return `False` \"\"\" domain = self . clean_domain ( domain ) data = await self . fetch ( Route ( \"GET\" , f \"/domains/ { domain } \" ), auth_required = False ) if not data : return False if \"missing permission\" in data : raise MissingPermission ( \"You don't have permission to access this API\" ) return True if data == b \"true\" else False","title":"check_domain()"},{"location":"code-reference/#phisherman.app.Client.close","text":"Close the client session. Source code in phisherman/app.py async def close ( self ) -> None : \"\"\"Close the client session.\"\"\" if self . _session is not None : await self . _session . close ()","title":"close()"},{"location":"code-reference/#phisherman.app.Client.fetch","text":"Fetching a response from the API Parameters: Name Type Description Default route Route The API route you want to make a call to required headers dict Headers for the API call, Defaults to None None data dict Data for the API call, Defaults to None None text_response bool Whether or not to expect text response, Defaults to False False auth_required bool Whether or not the auth token is required, Defaults to True True Source code in phisherman/app.py async def fetch ( self , route : Route , * , headers : dict = None , data : dict = None , text_response : bool = False , return_status : str = False , auth_required : bool = True , ) -> t . Optional [ dict ]: \"\"\" Fetching a response from the API Parameters ---------- route : Route The API route you want to make a call to headers : dict Headers for the API call, Defaults to None data : dict Data for the API call, Defaults to None text_response : bool Whether or not to expect text response, Defaults to False auth_required : bool Whether or not the auth token is required, Defaults to True Returns ------- t.Optional[dict] \"\"\" if headers is None : headers = {} headers = { \"User-Agent\" : self . USER_AGENT , ** headers } # TODO: Remove this auth_required logic. Redundant, as if the endpoint doesn't require auth, # it'll never be read, and hence passing it won't change anything. if auth_required : headers [ \"Authorization\" ] = f \"Bearer { self . token } \" if not self . _session : self . _session = aiohttp . ClientSession () async with self . _lock : async with self . _session . request ( method = route . method , url = route . url , headers = headers , data = data ) as res : if return_status : return res . status if res . status in [ 200 , 201 ]: if text_response : data = await res . text () else : data = await res . json () else : data = None return data","title":"fetch()"},{"location":"code-reference/#phisherman.app.Client.fetch_info","text":"Fetch the information for a domain. Parameters: Name Type Description Default domain str Domain you want to look for required Source code in phisherman/app.py async def fetch_info ( self , domain : str ) -> dict : \"\"\" Fetch the information for a domain. Parameters ---------- domain : str Domain you want to look for Returns ------- dict \"\"\" domain = self . clean_domain ( domain ) data = await self . fetch ( Route ( \"GET\" , f \"/domains/info/ { domain } \" )) if not data : return {} success = data . get ( \"success\" , False ) if not success : if data . get ( \"message\" , \"\" ) == \"missing permission\" : raise InvalidRequest ( \"Invalid Request, Check your domain.\" ) return data [ domain ]","title":"fetch_info()"},{"location":"code-reference/#phisherman.app.Client.report_phish","text":"Report a site for phishing Parameters: Name Type Description Default domain str Domain you want to report as a phising site. required guild Optional[int] Discord Guild ID where you discovered the site link. None Source code in phisherman/app.py async def report_phish ( self , domain : str , guild : t . Optional [ int ] = None ) -> bool : \"\"\" Report a site for phishing Parameters ---------- domain : str Domain you want to report as a phising site. guild : t.Optional[int] Discord Guild ID where you discovered the site link. Returns ------- bool \"\"\" domain = self . clean_domain ( domain ) data = None if guild : data = { \"guild\" : str ( guild )} status_code = await self . fetch ( Route ( \"POST\" , f \"/domains/report/ { domain } \" ), data = data ) if status_code == 204 : logger . info ( f \"Successfully reported the site ` { guild } `\" ) return True else : return False","title":"report_phish()"},{"location":"code-reference/#phisherman.route","text":"","title":"route"},{"location":"code-reference/#phisherman.route.Route","text":"Class used for constructing API endpoints with a given base URL Attributes: Name Type Description method t.Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"] Method for the API Call path str Endpoints for the API Source code in phisherman/route.py class Route : \"\"\" Class used for constructing API endpoints with a given base URL Attributes ---------- method : t.Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"] Method for the API Call path : str Endpoints for the API \"\"\" BASE_URL = \"https://api.phisherman.gg/v1\" def __init__ ( self , method : t . Literal [ \"GET\" , \"POST\" , \"PUT\" , \"DELETE\" , \"PATCH\" ], path : str ) -> None : \"\"\" Construct a route Parameters ---------- method : str Method for the API Call path : str Endpoints for the API \"\"\" self . method = method . upper () self . path = path @property def base_url ( self ) -> str : \"\"\"Base URL\"\"\" return self . BASE_URL @base_url . setter def base_url ( self , url : str ) -> None : \"\"\" Base URL setter Parameters ---------- url : str the URL you want to set \"\"\" self . BASE_URL = url @property def url ( self ) -> str : \"\"\"Returns the complete route with the\"\"\" return self . base_url + self . path","title":"Route"},{"location":"code-reference/#phisherman.route.Route.base_url","text":"Base URL","title":"base_url"},{"location":"code-reference/#phisherman.route.Route.url","text":"Returns the complete route with the","title":"url"},{"location":"code-reference/#phisherman.route.Route.__init__","text":"Construct a route Parameters: Name Type Description Default method Literal['GET', 'POST', 'PUT', 'DELETE', 'PATCH'] Method for the API Call required path str Endpoints for the API required Source code in phisherman/route.py def __init__ ( self , method : t . Literal [ \"GET\" , \"POST\" , \"PUT\" , \"DELETE\" , \"PATCH\" ], path : str ) -> None : \"\"\" Construct a route Parameters ---------- method : str Method for the API Call path : str Endpoints for the API \"\"\" self . method = method . upper () self . path = path","title":"__init__()"},{"location":"installation/","text":"Installation To install phisherman.py, run the following command from the command line: pip install phisherman.py In case if you want to install from development, run the following command: pip install git+https://github.com/QristaLabs/phisherman.py","title":"Installation"},{"location":"installation/#installation","text":"To install phisherman.py, run the following command from the command line: pip install phisherman.py In case if you want to install from development, run the following command: pip install git+https://github.com/QristaLabs/phisherman.py","title":"Installation"}]}